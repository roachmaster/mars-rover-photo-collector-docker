plugins {
    id 'maven'
    id 'com.palantir.docker' version("0.24.0")
}

repositories {
    mavenCentral()
    maven {
        credentials {
            username mavenUser
            password mavenPassword
        }
        url mavenRepo
    }
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: mavenRepo) {
//                authentication(userName: mavenUser, password: mavenPassword)
//            }
//            pom.version = version + "-SNAPSHOT"
//            pom.artifactId = artifactId
//            pom.groupId = groupId
//        }
//    }
//}

ext {
    jarVersion = "1.0.0-SNAPSHOT"
    jarArtifactId = "${project.name.minus("-docker")}"
    jarGroupId = "com.leonardo.rocha"
}

dependencies {
    docker "${jarGroupId}:${jarArtifactId}:${jarVersion}"
}

task copySpringBootJar(type: Copy){
    from project.configurations.docker.resolvedConfiguration.resolvedArtifacts[0].file
    into "${buildDir}/dockerStage"
}

task extractManifest(type: Exec){
    dependsOn(project.tasks.copySpringBootJar)
    workingDir "${buildDir}/dockerStage"
    commandLine "jar","xvf","${jarArtifactId}-${jarVersion}.jar", "META-INF/MANIFEST.MF"
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

project.tasks.docker.dependsOn(project.tasks.extractManifest)

docker {
    files project.configurations.docker.resolvedConfiguration.resolvedArtifacts[0].file
    buildArgs(['JAR_FILE': "${jarArtifactId}-${jarVersion}.jar"])
}

project.afterEvaluate {
    docker {
        name "${jarGroupId.replace(".", "/")}/${jarArtifactId}:${jarVersion}-${getJenkinsBuild()}"
    }
}

def getJenkinsBuild(){
    def manifest = new java.util.jar.Manifest(new FileInputStream(file("${buildDir}/dockerStage/META-INF/MANIFEST.MF")));
    def attr = manifest.getMainAttributes();
    return attr.getValue("Jenkins-Build")
}

