plugins {
    id 'maven'
}

repositories {
    mavenCentral()
    maven {
        credentials {
            username mavenUser
            password mavenPassword
        }
        url mavenRepo
    }
}

configurations {
    docker
}

ext {
    jarVersion = "1.0.0-SNAPSHOT"
    jarArtifactId = "${project.name.minus("-docker")}"
    jarGroupId = "com.leonardo.rocha"
}

dependencies {
    docker "${jarGroupId}:${jarArtifactId}:${jarVersion}"
}

task copySpringBootJar(type: Copy){
    from project.configurations.docker.resolvedConfiguration.resolvedArtifacts[0].file
    into "${buildDir}/dockerStage"
}

task extractManifest(type: Exec){
    dependsOn(project.tasks.copySpringBootJar)
    workingDir "${buildDir}/dockerStage"
    commandLine "jar","xvf","${jarArtifactId}-${jarVersion}.jar", "META-INF/MANIFEST.MF"
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
    doLast{
        project.ext.set("jenkinsBuild",getJenkinsBuild("${buildDir}/dockerStage/META-INF/MANIFEST.MF"))

    }
}

task deleteManifest(type: Delete) {
    dependsOn(project.tasks.extractManifest)
    delete "${buildDir}/dockerStage/META-INF"
}

task copyDockerFile(type:Copy){
    dependsOn(project.tasks.deleteManifest)
    from "${projectDir}/Dockerfile"
    into "${buildDir}/dockerStage"
}

task docker(){
    dependsOn project.tasks.copyDockerFile

    def jarFileName
    def dockerRepoName
    def commandLineString

    doLast{
        exec {
            workingDir("${buildDir}/dockerStage/")
            println project.ext.get("jenkinsBuild")
            jarFileName = "${jarArtifactId}-${jarVersion}.jar"
            dockerRepoName = "${jarGroupId.replace(".", "/")}/${jarArtifactId}:${jarVersion}-${project.ext.get('jenkinsBuild')}"
            commandLineString = "docker build --build-arg JAR_FILE=${jarFileName} -t ${dockerRepoName} ."
            commandLine commandLineString.split(" ")
        }
    }
}

project.tasks.docker.dependsOn(project.tasks.extractManifest)

def getJenkinsBuild(def fileName){
    def manifest = new java.util.jar.Manifest(new FileInputStream(file(fileName)));
    def attr = manifest.getMainAttributes();
    return attr.getValue("Jenkins-Build")
}

